basePath: /v1
definitions:
  main.createPostForm:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  main.updatePostForm:
    properties:
      content:
        maxLength: 100
        type: string
      title:
        maxLength: 100
        type: string
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.Follower:
    properties:
      created_at:
        type: string
      follower_id:
        type: integer
      user_id:
        type: integer
    type: object
  store.Metadata:
    properties:
      current_page:
        type: integer
      first_page:
        type: integer
      last_page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.PostWithMetadata:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      comments_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        properties:
          first_name:
            type: string
          id:
            type: integer
          last_name:
            type: string
          username:
            type: string
        type: object
      user_id:
        type: integer
      version:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified_at:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API FOR gopher social.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Mingle Socials API
  version: 0.0.1
paths:
  /posts:
    post:
      consumes:
      - application/json
      description: Creates a post
      parameters:
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.createPostForm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            properties:
              post:
                $ref: '#/definitions/store.Post'
            type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Fetch a post by its ID, including its associated comments.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched post with comments
          schema:
            properties:
              post:
                $ref: '#/definitions/store.Post'
            type: object
        "404":
          description: Not Found - Post not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get a post by ID
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Updates a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.updatePostForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              follower:
                $ref: '#/definitions/store.Post'
            type: object
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a post
      tags:
      - posts
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetch a user profile by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success response with user data
          schema:
            properties:
              user:
                $ref: '#/definitions/store.User'
            type: object
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{id}/follow:
    put:
      consumes:
      - application/json
      description: Follow a user by their ID. The follower ID is hardcoded to 1 for
        this example.
      parameters:
      - description: User ID of the user to follow
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Successfully followed the user
          schema:
            properties:
              follower:
                $ref: '#/definitions/store.Follower'
            type: object
        "409":
          description: Conflict - Already following this user
          schema:
            properties:
              error:
                properties:
                  message:
                    type: string
                type: object
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                properties:
                  message:
                    type: string
                type: object
            type: object
      security:
      - ApiKeyAuth: []
      summary: Follow a user
      tags:
      - users
  /users/{id}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user by their ID. The follower ID is hardcoded to 1
        for this example.
      parameters:
      - description: User ID of the user to unfollow
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successfully unfollowed the user
        "404":
          description: Not Found - No follow relationship found
          schema:
            properties:
              error:
                properties:
                  message:
                    type: string
                type: object
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                properties:
                  message:
                    type: string
                type: object
            type: object
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches the user feed with pagination and filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 20)'
        in: query
        name: page_size
        type: integer
      - description: Sort order (e.g., 'created_at' or '-created_at')
        in: query
        name: sort
        type: string
      - description: Search term
        in: query
        name: search
        type: string
      - description: Comma-separated list of tags to filter by
        in: query
        name: tags
        type: string
      - description: Filter posts created after this timestamp (RFC3339 format)
        in: query
        name: since
        type: string
      - description: Filter posts created before this timestamp (RFC3339 format)
        in: query
        name: until
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              ' metadata':
                $ref: '#/definitions/store.Metadata'
              posts:
                items:
                  $ref: '#/definitions/store.PostWithMetadata'
                type: array
            type: object
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the user feed
      tags:
      - feed
securityDefinitions:
  Bearer:
    description: Bearer token authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
